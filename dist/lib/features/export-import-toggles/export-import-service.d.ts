import { IUnleashConfig } from '../../types/option';
import { IFeatureStrategy, IFeatureStrategySegment } from '../../types/model';
import { IStrategy } from '../../types/stores/strategy-store';
import { IUnleashStores } from '../../types/stores';
import { ExportQuerySchema } from '../../openapi/spec/export-query-schema';
import { IUnleashServices } from '../../types';
import { ExportResultSchema, ImportTogglesValidateSchema } from '../../openapi';
import { ImportTogglesSchema } from '../../openapi/spec/import-toggles-schema';
import User from '../../types/user';
export default class ExportImportService {
    private logger;
    private toggleStore;
    private featureStrategiesStore;
    private eventStore;
    private importTogglesStore;
    private tagTypeStore;
    private featureEnvironmentStore;
    private featureTagStore;
    private segmentStore;
    private flagResolver;
    private featureToggleService;
    private contextFieldStore;
    private strategyService;
    private contextService;
    private accessService;
    private tagTypeService;
    private featureTagService;
    private importPermissionsService;
    constructor(stores: Pick<IUnleashStores, 'importTogglesStore' | 'eventStore' | 'featureStrategiesStore' | 'featureToggleStore' | 'featureEnvironmentStore' | 'tagTypeStore' | 'featureTagStore' | 'segmentStore' | 'contextFieldStore'>, { getLogger, flagResolver, }: Pick<IUnleashConfig, 'getLogger' | 'flagResolver'>, { featureToggleService, strategyService, contextService, accessService, tagTypeService, featureTagService, }: Pick<IUnleashServices, 'featureToggleService' | 'strategyService' | 'contextService' | 'accessService' | 'tagTypeService' | 'featureTagService'>);
    validate(dto: ImportTogglesSchema, user: User): Promise<ImportTogglesValidateSchema>;
    import(dto: ImportTogglesSchema, user: User): Promise<void>;
    private importDefault;
    private importToggleStatuses;
    private importStrategies;
    private deleteStrategies;
    private importTags;
    private importContextFields;
    private importTagTypes;
    private importToggleVariants;
    private createToggles;
    private verifyContextFields;
    private verifyFeatures;
    private cleanData;
    private static remapSegments;
    private removeArchivedFeatures;
    private verifyStrategies;
    private getUnsupportedStrategies;
    private getUsedCustomStrategies;
    isCustomStrategy: (supportedStrategies: IStrategy[]) => (x: string) => boolean;
    private getUnsupportedContextFields;
    private getArchivedFeatures;
    private getOtherProjectFeatures;
    private getNewTagTypes;
    private getNewContextFields;
    export(query: ExportQuerySchema, userName: string): Promise<ExportResultSchema>;
    addSegmentsToStrategies(featureStrategies: IFeatureStrategy[], strategySegments: IFeatureStrategySegment[]): void;
}
